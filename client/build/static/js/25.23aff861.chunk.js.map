{"version":3,"sources":["pages/Dates/Dates.js"],"names":["Dates","useState","output","setOutput","events","setEvents","todayDate","setToday","modal","setModal","row","setRow","eventName","desc","date","input","setInput","togglePopup","history","useHistory","handleChange","e","target","name","value","prev","deleteEventonStart","handleData","then","res","status","results","push","alert","useEffect","Date","today","getDate","getMonth","getFullYear","json","result","i","length","event","rows","dateDiff","style","display","class","borderWidth","marginRight","marginTop","marginBottom","borderColor","backgroundColor","width","float","position","top","right","onClick","window","confirm","fontSize","toFixed","className","maxWidth","marginLeft","isOpen","toggle","margin","for","type","placeholder","onChange"],"mappings":"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","file":"static/js/25.23aff861.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n    Button,\n    Col,\n    Row,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    InputGroup,\n    Input\n} from \"reactstrap\";\nimport { handleData } from \"../../Client_API\";\n\nfunction Dates() {\n    const [ output, setOutput ] = useState(null);\n    const [ events, setEvents ] = useState(0);\n    const [ todayDate, setToday ] = useState(\"\");\n    const [ modal, setModal ] = useState(false);\n    const [ row, setRow ] = useState(null);\n    const [ input, setInput ] = useState({\n        eventName: \"\",\n        desc: \"\",\n        date: \"\"\n    });\n\n    const togglePopup = () => setModal(!modal)\n    const history = useHistory()\n\n    const fetchEvent = () => {\n        handleData(\"/events\", \"GET\")\n        .then(res => {\n            if (res.status === 200) {\n                return res.json()\n            }\n            else return false\n        })\n        .then(results => {\n            if (results) {\n\n                let result = []\n\n                for (let i = 0; i < results.length; i++) {\n                    let today = new Date()\n                    let eventDate = new Date(results[i][3])\n                    let timeDiff = eventDate - today;\n                    let dateDiff = timeDiff / (1000 * 3600 * 24);\n                    if (dateDiff <= -1) {\n                        deleteEventonStart(results[i][1])\n                    }\n                    else {\n                        result.push(results[i])\n                    }\n                }\n\n                setOutput(result)\n\n            }\n        })\n    }\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setInput(prev => ({\n            ...prev,\n            [name]: value\n        }));\n    }\n    \n    const submit = () => {\n        if (events < 24) {\n            handleData(\"/event\", \"POST\", input)\n            .then(res => {\n                if (res.status === 200) {\n                    return true\n                }\n                else return false\n            })\n            .then(results => {\n                if (results) {\n                    history.push(\"/dates\")\n                }\n                else {\n                    alert(\"Error registering a new Event!\")\n                }\n            })\n        }\n        else {\n            alert(\"Maximum amount of event registered.\")\n        }\n    }\n\n    const deleteEventonStart = (eventName) => {\n        handleData(\"/deleteEvent\", \"POST\", {eventName})\n        .then(res => {\n            if (res.status === 200) {\n                return true\n            }\n            else return false\n        })\n        .then(results => {\n            if (results) {\n                history.push(\"/dates\")\n            }\n            else {\n                alert(`Error deleting ${eventName}!`)\n            }\n        })\n    }\n\n    const deleteEvent = (eventName) => {\n        if (window.confirm(`Are you sure to delete ${eventName}`)){\n            handleData(\"/deleteEvent\", \"POST\", {eventName})\n            .then(res => {\n                if (res.status === 200) {\n                    return true\n                }\n                else return false\n            })\n            .then(results => {\n                if (results) {\n                    history.push(\"/dates\")\n                }\n                else {\n                    alert(`Error deleting ${eventName}!`)\n                }\n            })\n        }\n    }\n\n    useEffect(() => {\n        let date = new Date()\n        let today = `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`\n        setToday(today)\n    }, [todayDate])\n\n    useEffect(() => {\n        fetchEvent()\n    }, [])\n\n    useEffect(() => {\n\n        let event = []\n        let rows = []\n\n        if (output) {\n\n            setEvents(output.length)\n\n            for (let i = 0; i < 10 && i < output.length; i++) {\n                let today = new Date()\n                let eventDate = new Date(output[i][3])\n                let timeDiff = eventDate - today;\n                let dateDiff = timeDiff / (1000 * 3600 * 24);\n                if (dateDiff < 0) {\n                    dateDiff = 0\n                }\n                else {\n                    dateDiff = dateDiff\n                }\n    \n                event.push(\n                    <div style = {{ display: \"flex\" }}>\n                        <div class = \"card bg-white\" style = {dateDiff === 0 ? { borderWidth: 1.5, marginRight: -5, marginTop: 5, marginBottom: 5, borderColor: \"red\" } : { borderWidth: 1.5, marginRight: -5, marginTop: 5, marginBottom: 5 }}>\n                            <button style = {{ borderWidth: 0, backgroundColor: \"white\", width: 25, float: \"right\", position: \"absolute\", top: 0, right: 0 }} onClick = { () => deleteEvent(output[i][1]) }> &#x2715; </button>\n                            <div class = \"card-body text-center\">\n                                <h5 class = \"card-title\" style = {{ fontSize: 20, marginTop: -10 }}> { output[i][1] } {`<3`} </h5>\n                                <p class = \"card-text\" style = {{ marginTop: -13, marginBottom: 5 }}> Description: { output[i][2] } </p>\n                                <p class = \"card-text\" style = {{ fontSize: 40, marginTop: -13, marginBottom: -15 }}> { dateDiff.toFixed(0) > 1 ? `${dateDiff.toFixed(0)} DAYS` : `${dateDiff.toFixed(0)} DAY` } LEFT</p>\n                                <p class = \"card-text\" style = {{ marginTop: 10, marginBottom: -15 }}> Date: <u> { output[i][3] } </u> </p>\n                            </div>\n                        </div>\n                    </div>\n                )\n\n                if (i === output.length-1) {\n                    rows.push(\n                        <Row>\n                            {event}\n                        </Row>\n                    )\n                }\n    \n            }\n\n            setRow(rows)\n\n        }\n\n\n    }, [output])\n\n    \n    return (\n        <div className = \"animated fadeIn\">\n            <div className = \"card-deck\">\n                <div class = \"card bg-transparent\" style = {{ borderWidth: 0, marginRight: -10, maxWidth: \"50%\" }}>\n                    <div class = \"card-body\">\n                        <h5 class = \"card-title\" style = {{ fontSize: 25 }}> Today Date : </h5>\n                        <p class = \"card-text text-center\" style = {{ fontSize: 50, marginTop: -55, marginBottom: -15 }}> { todayDate } </p>\n                    </div>\n                </div>\n                <Button style = {{ borderColor: \"black\", width: \"50%\", marginLeft: 10 }} onClick = {togglePopup}>\n                    <h5 style = {{ fontSize: 25 }}>\n                        Create Event\n                    </h5>\n                </Button>\n\n                <Modal isOpen = {modal} toggle = {togglePopup}>\n                    <ModalHeader toggle = {togglePopup}> Create an event to mark! </ModalHeader>\n                    <ModalBody>\n                        <Row style = {{ margin: 10 }}>\n                            <label for = \"event\">\n                                Event Name\n                            </label>\n                            <InputGroup className = \"mb-1\">\n                                <Input\n                                    type = \"text\"\n                                    name = \"eventName\"\n                                    placeholder = \"Enter Event Name\"\n                                    value = { input.eventName }\n                                    onChange = { handleChange }\n                                />\n                            </InputGroup>\n                        </Row>\n                        <Row style = {{ margin: 10 }}>\n                            <label for = \"desc\">\n                                Description (Optional)\n                            </label>\n                            <InputGroup className = \"mb-1\">\n                                <Input\n                                    type = \"text\"\n                                    name = \"desc\"\n                                    placeholder = \"Enter Description\"\n                                    value = { input.desc }\n                                    onChange = { handleChange }\n                                />\n                            </InputGroup>\n                        </Row>\n                        <Row style = {{ margin: 10 }}>\n                            <label for = \"date\">\n                                Date\n                            </label>\n                            <InputGroup className = \"mb-1\">\n                                <Input\n                                    type = \"date\"\n                                    name = \"date\"\n                                    placeholder = \"Enter Date\"\n                                    value = { input.date }\n                                    onChange = { handleChange }\n                                />\n                            </InputGroup>\n                        </Row>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button onClick = {submit}>\n                            Done\n                        </Button>\n                        <Button onClick = {togglePopup}>\n                            Cancel\n                        </Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n            <div className = \"card-deck\">\n                <Col>\n                    {row}\n                </Col>\n            </div>\n        </div>\n    )\n}\n\nexport default Dates;"],"sourceRoot":""}